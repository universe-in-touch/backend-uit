import { Handler } from "@netlify/functions";
import { XummSdk } from "xumm-sdk";
import * as dotenv from "dotenv";

dotenv.config();

const apiKey = process.env.XUMM_API_KEY;
const apiSecret = process.env.XUMM_API_SECRET;

const xumm = new XummSdk(apiKey, apiSecret);

const handler: Handler = async (event, context) => {
    console.log("üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞...");

    try {
        const params = event.queryStringParameters;
        const xrpPay = Math.round(parseFloat(params?.xrpPay || "0") * 1000000); // XRP –≤ –¥—Ä–æ–ø–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
        const babaGet = parseFloat(params?.babaGet || "0");
        const refCode = params?.refCode || "";

        console.log("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", { xrpPay, babaGet, refCode });
        console.log("BABA:", babaGet.toString());
        if (xrpPay <= 0 || babaGet <= 0) {
            return {
                statusCode: 400,
                body: JSON.stringify({ error: "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞." })
            };
        }

        console.log("üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è XUMM payload –¥–ª—è –æ—Ä–¥–µ—Ä–∞...");
        const payload = await xumm.payload.create({
            TransactionType: "OfferCreate",
            Fee: "12",
            TakerPays: {
                currency: "4241424100000000000000000000000000000000", // 40-–±–∞–π—Ç–æ–≤—ã–π —Ö–µ—à –≤–∞–ª—é—Ç—ã (BABA)
                issuer: "rdYLqmL2paFvDL2ERw6VHuSuken5uQyrK",
                value: babaGet.toString()
            },
            TakerGets: xrpPay.toString(),
            Memos: [
                {
                    Memo: {
                        MemoType: Buffer.from("refCode", "utf8").toString("hex"),
                        MemoData: Buffer.from(refCode, "utf8").toString("hex")
                    }
                }
            ]
        }, true);


        console.log("‚úÖ Payload —Å–æ–∑–¥–∞–Ω:", payload);

        return {
            statusCode: 200,
            headers: {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
            },
            body: JSON.stringify({ uuid: payload.uuid })
        };
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ XUMM:", error);

        return {
            statusCode: 500,
            headers: {
                "Access-Control-Allow-Origin": "*",
            },
            body: JSON.stringify({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ XUMM" })
        };
    }
};

export { handler };
