import { Handler, HandlerEvent, HandlerContext } from "@netlify/functions";
import { XummSdk } from "xumm-sdk";
import * as dotenv from "dotenv";

dotenv.config();

const apiKey = process.env.XUMM_API_KEY;
const apiSecret = process.env.XUMM_API_SECRET;

const xumm = new XummSdk(apiKey, apiSecret);

const handler: Handler = async (event: HandlerEvent, context: HandlerContext) => {
    console.log("üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞...");

    try {
        const params = event.queryStringParameters;
        const xrpPay = Math.round(parseFloat(params?.xrpPay || "0") * 1000000); // XRP –≤ –¥—Ä–æ–ø–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
        const babaGet = parseFloat(params?.babaGet || "0");

        console.log("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", { xrpPay, babaGet });

        if (xrpPay <= 0 || babaGet <= 0) {
            return {
                statusCode: 400,
                body: JSON.stringify({ error: "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞." }),
            };
        }

        console.log("üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è XUMM payload –¥–ª—è –æ—Ä–¥–µ—Ä–∞...");
        const payload = await xumm.payload.create(
            {
                txjson: {
                    TransactionType: "OfferCreate",
                    Fee: "12",
                    TakerPays: {
                        currency: "4241424100000000000000000000000000000000", // 40-–±–∞–π—Ç–æ–≤—ã–π —Ö–µ—à –≤–∞–ª—é—Ç—ã (BABA)
                        issuer: "rdYLqmL2paFvDL2ERw6VHuSuken5uQyrK",
                        value: babaGet.toString(),
                    },
                    TakerGets: xrpPay.toString(),
                },
                options: {
                    return_url: {
                        app: "https://universe-in-touch.github.io", // –î–ª—è –≤–µ–±–∞
                    },
                    force_network: "MAINNET", // –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç—å
                },
                custom_meta: {
                    instruction: "Confirm the order directly to DEX.", // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                },
            },
            true
        );

        console.log("‚úÖ Payload —Å–æ–∑–¥–∞–Ω:", payload);

        return {
            statusCode: 200,
            headers: {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",  // —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                "Access-Control-Allow-Methods": "GET, POST, OPTIONS", // —É–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
            } as { [key: string]: string },  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            body: JSON.stringify({ uuid: payload?.uuid || "payload null" }),
        };
    } catch (error: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ XUMM:", error.response ? error.response.data : error);

        return {
            statusCode: 500,
            headers: {
                "Access-Control-Allow-Origin": "*",
            } as { [key: string]: string },
            body: JSON.stringify({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ XUMM", details: error.response ? error.response.data : error.message }),
        };
    }
};

export { handler };
