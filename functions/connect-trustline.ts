import { Handler } from "@netlify/functions";
import { XummSdk } from "xumm-sdk";
import * as dotenv from "dotenv";

dotenv.config();

const apiKey = process.env.XUMM_API_KEY;
const apiSecret = process.env.XUMM_API_SECRET;

const xumm = new XummSdk(apiKey, apiSecret);

const handler: Handler = async (event, context) => {
    console.log("üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Trustline...");

    try {
        // –°–æ–∑–¥–∞–Ω–∏–µ payload –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Trustline
        console.log("üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è XUMM payload...");
        const payload = await xumm.payload.create({
            txjson: {
                TransactionType: "TrustSet",
                LimitAmount: {
                    currency: "4241424100000000000000000000000000000000", // BABA —Ç–æ–∫–µ–Ω
                    issuer: "rdYLqmL2paFvDL2ERw6VHuSuken5uQyrK", // –ê–¥—Ä–µ—Å —ç–º–∏—Ç–µ–Ω—Ç–∞ BABA
                    value: "1000000", // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TrustLine
                },
                Flags: 0x00020000, // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Trustline
            },
            options: {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–µ–± –∏ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                return_url: {
                    app: "https://universe-in-touch.github.io", // URL –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
                },
                force_network: "MAINNET", // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –¥–ª—è MAINNET —Å–µ—Ç–∏
            },
            custom_meta: {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
                instruction: "Confirm the ONLY Official Trustline for BABA token.",
            },
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–æ–≥–æ —Å–ª—É—á–∞—è
        if (!payload) {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å payload –¥–ª—è XUMM.");
        }

        console.log("‚úÖ Payload —Å–æ–∑–¥–∞–Ω:", payload);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ uuid
        const response = {
            statusCode: 200,
            headers: {
                "Access-Control-Allow-Origin": "*", // –†–∞–∑—Ä–µ—à–∞–µ—Ç CORS-–∑–∞–ø—Ä–æ—Å—ã
                "Access-Control-Allow-Headers": "Content-Type", // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ Content-Type
                "Access-Control-Allow-Methods": "GET, POST, OPTIONS", // –†–∞–∑—Ä–µ—à–∞–µ–º –º–µ—Ç–æ–¥—ã GET, POST, OPTIONS
            },
            body: JSON.stringify({ uuid: payload.uuid }), // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ uuid
        };

        return response; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è XUMM payload:", error);

        // –û—à–∏–±–∫–∞: —Ç–∏–ø—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã
        const errorResponse = {
            statusCode: 500,
            headers: {
                "Access-Control-Allow-Origin": "*", // –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –æ—à–∏–±–æ–∫
            },
            body: JSON.stringify({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ XUMM payload" }),
        };

        return errorResponse; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
    }
};

export { handler };
